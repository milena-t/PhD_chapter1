import parse_gff as gff
# import make_repeats_barplot as repeats
import pandas as pd
import re
import plot_basics as my_plotting

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.ticker import FuncFormatter

"""
This file reads and plots whole genome repeat statistics from the .tbl outfile generated by repeatmasker
"""


def tbl_files_paths():
    tbl_dir = "/Users/miltr339/work/repeatmasking/repeat_tbl/"
    tbl_files = {
        "A_obtectus" : f"{tbl_dir}A_obtectus_repeatmasker_stats.tbl",
        "A_verrucosus" : f"{tbl_dir}A_verrucosus_repeatmasker_stats.tbl",
        "B_siliquastri" : f"{tbl_dir}B_siliquastri_repeatmasker_stats.tbl",
        "C_analis" : f"{tbl_dir}C_analis_repeatmasker_stats.tbl",
        "C_chinensis" : f"{tbl_dir}C_chinensis_repeatmasker_stats.tbl",
        "C_maculatus" : f"{tbl_dir}C_maculatus_repeatmasker_stats.tbl",
        "C_septempunctata" : f"{tbl_dir}C_septempunctata_repeatmasker_stats.tbl",
        "D_melanogaster" : f"{tbl_dir}D_melanogaster_repeatmasker_stats.tbl",
        "D_ponderosae" : f"{tbl_dir}D_ponderosae_repeatmasker_stats.tbl",
        "I_luminosus" : f"{tbl_dir}I_luminosus_repeatmasker_stats.tbl",
        "P_pyralis" : f"{tbl_dir}P_pyralis_repeatmasker_stats.tbl",
        "R_ferrugineus" : f"{tbl_dir}R_ferrugineus_repeatmasker_stats.tbl",
        "T_castaneum" : f"{tbl_dir}T_castaneum_repeatmasker_stats.tbl",
        "T_molitor" : f"{tbl_dir}T_molitor_repeatmasker_stats.tbl",
        "Z_morio" : f"{tbl_dir}Z_morio_repeatmasker_stats.tbl",
    }
    return tbl_files


def get_repeat_content_tbl(tbl_path:str):
    """
    Extract only the percentage of masked bases from the tbl outfile
    """
    masked_str = "bases masked" # e.g.: bases masked:  800002679 bp ( 72.39 %)
    with open(tbl_path, "r") as tbl_stats:
        masked_line = [line for line in tbl_stats.readlines() if masked_str in line][0]
        # print(masked_line)
        masked_percentage = masked_line.strip().split("(")[1].split("%")[0].strip()
        # print(masked_percentage)
    return masked_percentage


def get_wg_repeats_stats_dict(tbl_filepath:str):
    """
    use the .tbl output from repeatmasker to get whole-genome stats of repeat content
    outpuit format is a dictionary, { category : percentage }
    """
    repeat_content_dict:dict = {}
    with open(tbl_filepath, "r") as tbl_file:
        for line in tbl_file.readlines():
            if line[0].isspace():
                continue
            line_nospace = line.strip()
            if line_nospace[-1] == "%" and line_nospace[0:2] != "GC" and "Total interspersed repeats" not in line_nospace:  # get all lines with % in the last column but skip the one about GC content, this leaves only repeats
                line_list = line_nospace.split("   ")
                percentage = float(line_list[-1].split()[0])
                # print(f"{line_list[0]} : {percentage} % ")
                category = line_list[0].replace(":","")
                repeat_content_dict[category] = percentage
    return(repeat_content_dict)



def plot_wg_repeat_stats(repeat_stats_dict:dict[dict[str,float]], filename = "whole_genome_repeat_contents.png", tree_filepath = "", plot_tree = False):
    """
    Take the nested dictionary of species names and repeat stats returned by get_wg_repeats_stats_dict and make it a stacked barplot with one bar per species
    """


    if plot_tree:
        fs = 17 # set font size
        fig, (ax, ax_tree) = plt.subplots(2, 1,figsize=(10,15), gridspec_kw={'height_ratios': [2, 3]}, constrained_layout=True)
        species_names_unsorted = my_plotting.plot_tree_manually(tree_filepath, ax_tree)
    else:
        fs = 23
        aspect_ratio = 30 / 16
        height_pixels = 1200  # Height in pixels
        width_pixels = int(height_pixels * aspect_ratio)  # Width in pixels
        fig, ax = plt.subplots(figsize=(width_pixels / 100, height_pixels / 100), dpi=100)
        species_names_unsorted = my_plotting.plot_tree_manually(tree_filepath)
    # Width of the bars
    width = 0.75
    

    colors = {
        'Unclassified' : "#C1C1C1" , # light grey
        # orange
        'DNA transposons' : "#FF9000" , # Princeton orange
        # green
        'Retroelements' : "#6E8448" , # reseda green
        'Rolling-circles' : "#8EA861" , # asparagus 
        'Total interspersed repeats' : "#4D5C33", # dark moss green

        # red
        'tRNA' : "#C14953" , # bittersweet shimmer
        'rRNA' : "#D0767E" , # old rose
        'Small RNA' : "#7A2A30" , # wine
        # blue 
        'LINE' : "#3476AD" , # UCLA blue
        'SINE': "#72A8D5" , # ruddy blue
        # '' : "#2A618D" , #lapis lazuli
        # dark red-brown
        'Low complexity' : "#3A3335" , # Jet 
        'Satellites' : "#564D4F" , #Wenge 
        'Simple repeats' : "#96888B"# "#827376" , #Taupe gray
    }

    x_contig_coords = []
    x_contig_labels = []
    all_categories = []
    ax.tick_params(axis='y', labelsize=fs)    
    ax.tick_params(axis='x', labelsize=fs)         
    
    # print(f"\n\n------------------------\n")
    # print(repeat_stats_dict)
    # print()

    if tree_filepath == "":
        species_names = list(repeat_stats_dict.keys())
    elif len(tree_filepath) > 0 and type(tree_filepath) == str:
        # if the species name is actually a string then assume it's a filepath to a newick tree
        # don't give an axis to plot and it will just return a species tree order
        species_names=[]
        for i in range(len(species_names_unsorted)):
            species_names.append(species_names_unsorted[i])
        # print(f"species names order from tree: {species_names}")


        for x_index, species in enumerate(species_names):
            sorted_categories = list(repeat_stats_dict[species].keys())
            try:
                curr_spec_repeats = repeat_stats_dict[species]
            except:
                raise RuntimeError(f"{species} not found in input dictionary: \n{repeat_stats_dict}")

            x_contig_coords.append(x_index)
            x_contig_labels.append(species)
            curr_base = 0

            for repeat_cat, percentage in curr_spec_repeats.items():
                all_categories.append(repeat_cat)

                ax.bar(x_index, percentage, width=width, label=repeat_cat, bottom=curr_base, color = colors[repeat_cat])
                curr_base += percentage

    x_contig_labels = [species.replace("_", ". ") for species in x_contig_labels]
    ax.set_xticklabels(x_contig_labels, rotation=90, fontsize=fs)
    ax.tick_params(axis='y', labelsize=fs)
    ax.tick_params(axis='x', labelsize=fs) 
    ax.set_ylim(0, 90)
    ax.set_ylabel("repeat content", fontsize=fs+4, rotation = 90, labelpad = 30)
    ax.yaxis.set_major_formatter(FuncFormatter(lambda x, pos: '' if x > 80 else f'{int(x)}%'))

    # make legend patches and labels
    handles = []
    labels = [] 

    for category in sorted_categories[::-1]:# species_abundances[list(contig_lengths.keys())[0]][1]:
        handles.append(mpatches.Patch(color=colors[category]))
        labels.append(category)

    ax.legend(handles, labels, fontsize = fs, loc='upper center', ncol=4)
    
    plt.tight_layout()

    plt.savefig(filename, dpi = 300, transparent = False, bbox_inches='tight')
    print(f"plot saved in current working directory as: {filename}")


if __name__ == "__main__":
    
    tbl_files = tbl_files_paths()
    data = "/Users/miltr339/work/PhD_code/PhD_chapter1/data/"
    tree_filepath = "/Users/miltr339/work/PhD_code/PhD_chapter1/data/orthofinder_native/SpeciesTree_native_only_species_names.nw"

    repeat_contents_stats = {}
    
    for species, tbl_path in tbl_files.items():
        repeat_contents_stats[species] = get_wg_repeats_stats_dict(tbl_path)
    
    # plot_wg_repeat_stats(repeat_contents_stats, filename = f"{data}whole_genome_repeat_contents.png", tree_filepath = tree_filepath, plot_tree=False)

    ## TODO fix proportions for tree plotting
    plot_wg_repeat_stats(repeat_contents_stats, filename = f"{data}whole_genome_repeat_contents_with_tree.png", tree_filepath = tree_filepath, plot_tree=True)